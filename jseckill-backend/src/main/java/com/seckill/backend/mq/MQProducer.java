package com.seckill.backend.mq;import com.alibaba.fastjson.JSON;import com.seckill.backend.dto.SeckillMsgBody;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.client.producer.DefaultMQProducer;import org.apache.rocketmq.common.message.Message;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import redis.clients.jedis.JedisPool;import javax.annotation.PostConstruct;import javax.annotation.PreDestroy;import javax.annotation.Resource;@Componentpublic class MQProducer {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    private DefaultMQProducer producer = null;    @Value("${mq.provider.group}")    private String group;    @Value("${mq.provider.nameSrv}")    private String nameSrv;    @Value("${mq.provider.topic}")    private String topicName;    @PostConstruct    public void init(){        initMQProducer(group,nameSrv);    }    public void initMQProducer(String group,String nameSrvAddr) {        producer = new DefaultMQProducer(group);        //也可以不创建        //producer.setCreateTopicKey(topicName);        producer.setNamesrvAddr(nameSrvAddr+":9876");        producer.setRetryTimesWhenSendFailed(3);        producer.setSendMsgTimeout(3000);        //超时时间        try {            producer.start();        } catch (MQClientException e) {            e.printStackTrace();        }    }    public boolean sendmsg(String topic, String tags, String content) {        Message msg = new Message(topic, tags, "", content.getBytes());        try {            producer.send(msg);            return true;        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    @PreDestroy    public void shutDownProducer() {        if(producer != null) {            producer.shutdown();        }    }    @Resource(name = "initJedisPool")    private JedisPool jedisPool;    public void send(SeckillMsgBody body) {        String msg = JSON.toJSONString(body);        logger.info("send message:"+msg);        sendmsg(topicName,"tags", msg);//        Channel channel = mqChannelManager.getSendChannel();//        try {//            logger.info(" [mqSend] '" + msg + "'");//            channel.confirmSelect();////            channel.basicPublish("",//                    mqConfigBean.getQueue(),//                    MessageProperties.PERSISTENT_TEXT_PLAIN,//                    msg.getBytes());//////        } catch (IOException e) {//            e.printStackTrace();//        }////        boolean sendAcked = false;//        try {//            sendAcked = channel.waitForConfirms(100);//        } catch (InterruptedException e) {//            e.printStackTrace();//        } catch (TimeoutException e) {//            e.printStackTrace();//        }////        logger.info("sendAcked={}", sendAcked);//        if (sendAcked) {//            Jedis jedis = jedisPool.getResource();//            jedis.sadd(RedisKey.QUEUE_PRE_SECKILL, body.getSeckillId() + "@" + body.getUserPhone());//            jedis.close();//        } else {//            logger.info("!!!mqSend_NACKED,NOW_RETRY>>>");//            try {//                channel.basicPublish("",//                        mqConfigBean.getQueue(),//                        MessageProperties.PERSISTENT_TEXT_PLAIN,//                        msg.getBytes());//            } catch (IOException e) {//                e.printStackTrace();//            }//        }    }}